{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { of, pipe } from 'rxjs';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport * as i2 from '@angular/fire/compat/auth';\nimport firebase from 'firebase/compat/app';\nimport { VERSION } from '@angular/fire';\nconst loggedIn = map(user => !!user);\n\nclass AngularFireAuthGuard {\n  constructor(router, auth) {\n    this.router = router;\n    this.auth = auth;\n\n    this.canActivate = (next, state) => {\n      const authPipeFactory = next.data.authGuardPipe || (() => loggedIn);\n\n      return this.auth.user.pipe(take(1), authPipeFactory(next, state), map(can => {\n        if (typeof can === 'boolean') {\n          return can;\n        } else if (Array.isArray(can)) {\n          return this.router.createUrlTree(can);\n        } else {\n          // TODO(EdricChan03): Add tests\n          return this.router.parseUrl(can);\n        }\n      }));\n    };\n  }\n\n}\n\nAngularFireAuthGuard.ɵfac = function AngularFireAuthGuard_Factory(t) {\n  return new (t || AngularFireAuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AngularFireAuth));\n};\n\nAngularFireAuthGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AngularFireAuthGuard,\n  factory: AngularFireAuthGuard.ɵfac,\n  providedIn: 'any'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAuthGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: i1.Router\n    }, {\n      type: i2.AngularFireAuth\n    }];\n  }, null);\n})();\n\nconst canActivate = pipe => ({\n  canActivate: [AngularFireAuthGuard],\n  data: {\n    authGuardPipe: pipe\n  }\n});\n\nconst isNotAnonymous = map(user => !!user && !user.isAnonymous);\nconst idTokenResult = switchMap(user => user ? user.getIdTokenResult() : of(null));\nconst emailVerified = map(user => !!user && user.emailVerified);\nconst customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\n\nconst hasCustomClaim = claim => pipe(customClaims, map(claims => claims.hasOwnProperty(claim)));\n\nconst redirectUnauthorizedTo = redirect => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\n\nconst redirectLoggedInTo = redirect => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\n\nclass AngularFireAuthGuardModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'auth-guard-compat');\n  }\n\n}\n\nAngularFireAuthGuardModule.ɵfac = function AngularFireAuthGuardModule_Factory(t) {\n  return new (t || AngularFireAuthGuardModule)();\n};\n\nAngularFireAuthGuardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AngularFireAuthGuardModule\n});\nAngularFireAuthGuardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [AngularFireAuthGuard]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAuthGuardModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireAuthGuard]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AngularFireAuthGuard, AngularFireAuthGuardModule, canActivate, customClaims, emailVerified, hasCustomClaim, idTokenResult, isNotAnonymous, loggedIn, redirectLoggedInTo, redirectUnauthorizedTo };","map":{"version":3,"names":["i0","Injectable","NgModule","i1","of","pipe","map","take","switchMap","i2","firebase","VERSION","loggedIn","user","AngularFireAuthGuard","constructor","router","auth","canActivate","next","state","authPipeFactory","data","authGuardPipe","can","Array","isArray","createUrlTree","parseUrl","ɵfac","Router","AngularFireAuth","ɵprov","type","args","providedIn","isNotAnonymous","isAnonymous","idTokenResult","getIdTokenResult","emailVerified","customClaims","claims","hasCustomClaim","claim","hasOwnProperty","redirectUnauthorizedTo","redirect","redirectLoggedInTo","AngularFireAuthGuardModule","registerVersion","full","ɵmod","ɵinj","providers"],"sources":["C:/Users/Zubair/Desktop/Angular Projects/Githab-Firebase-auth/node_modules/@angular/fire/fesm2015/angular-fire-compat-auth-guard.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { of, pipe } from 'rxjs';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport * as i2 from '@angular/fire/compat/auth';\nimport firebase from 'firebase/compat/app';\nimport { VERSION } from '@angular/fire';\n\nconst loggedIn = map(user => !!user);\nclass AngularFireAuthGuard {\n    constructor(router, auth) {\n        this.router = router;\n        this.auth = auth;\n        this.canActivate = (next, state) => {\n            const authPipeFactory = next.data.authGuardPipe || (() => loggedIn);\n            return this.auth.user.pipe(take(1), authPipeFactory(next, state), map(can => {\n                if (typeof can === 'boolean') {\n                    return can;\n                }\n                else if (Array.isArray(can)) {\n                    return this.router.createUrlTree(can);\n                }\n                else {\n                    // TODO(EdricChan03): Add tests\n                    return this.router.parseUrl(can);\n                }\n            }));\n        };\n    }\n}\nAngularFireAuthGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAuthGuard, deps: [{ token: i1.Router }, { token: i2.AngularFireAuth }], target: i0.ɵɵFactoryTarget.Injectable });\nAngularFireAuthGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAuthGuard, providedIn: 'any' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAuthGuard, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'any'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.AngularFireAuth }]; } });\nconst canActivate = (pipe) => ({\n    canActivate: [AngularFireAuthGuard], data: { authGuardPipe: pipe }\n});\nconst isNotAnonymous = map(user => !!user && !user.isAnonymous);\nconst idTokenResult = switchMap((user) => user ? user.getIdTokenResult() : of(null));\nconst emailVerified = map(user => !!user && user.emailVerified);\nconst customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\nconst hasCustomClaim = (claim) => pipe(customClaims, map(claims => claims.hasOwnProperty(claim)));\nconst redirectUnauthorizedTo = (redirect) => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nconst redirectLoggedInTo = (redirect) => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\n\nclass AngularFireAuthGuardModule {\n    constructor() {\n        firebase.registerVersion('angularfire', VERSION.full, 'auth-guard-compat');\n    }\n}\nAngularFireAuthGuardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAuthGuardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAngularFireAuthGuardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAuthGuardModule });\nAngularFireAuthGuardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAuthGuardModule, providers: [AngularFireAuthGuard] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAuthGuardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [AngularFireAuthGuard]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireAuthGuard, AngularFireAuthGuardModule, canActivate, customClaims, emailVerified, hasCustomClaim, idTokenResult, isNotAnonymous, loggedIn, redirectLoggedInTo, redirectUnauthorizedTo };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}