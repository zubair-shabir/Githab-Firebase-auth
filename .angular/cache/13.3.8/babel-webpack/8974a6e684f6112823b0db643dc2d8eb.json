{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { of, pipe } from 'rxjs';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport * as i2 from '@angular/fire/compat/auth';\nimport firebase from 'firebase/compat/app';\nimport { VERSION } from '@angular/fire';\nconst loggedIn = /*#__PURE__*/map(user => !!user);\nlet AngularFireAuthGuard = /*#__PURE__*/(() => {\n  class AngularFireAuthGuard {\n    constructor(router, auth) {\n      this.router = router;\n      this.auth = auth;\n\n      this.canActivate = (next, state) => {\n        const authPipeFactory = next.data.authGuardPipe || (() => loggedIn);\n\n        return this.auth.user.pipe(take(1), authPipeFactory(next, state), map(can => {\n          if (typeof can === 'boolean') {\n            return can;\n          } else if (Array.isArray(can)) {\n            return this.router.createUrlTree(can);\n          } else {\n            // TODO(EdricChan03): Add tests\n            return this.router.parseUrl(can);\n          }\n        }));\n      };\n    }\n\n  }\n\n  AngularFireAuthGuard.ɵfac = function AngularFireAuthGuard_Factory(t) {\n    return new (t || AngularFireAuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AngularFireAuth));\n  };\n\n  AngularFireAuthGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AngularFireAuthGuard,\n    factory: AngularFireAuthGuard.ɵfac,\n    providedIn: 'any'\n  });\n  return AngularFireAuthGuard;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst canActivate = pipe => ({\n  canActivate: [AngularFireAuthGuard],\n  data: {\n    authGuardPipe: pipe\n  }\n});\n\nconst isNotAnonymous = /*#__PURE__*/map(user => !!user && !user.isAnonymous);\nconst idTokenResult = /*#__PURE__*/switchMap(user => user ? user.getIdTokenResult() : of(null));\nconst emailVerified = /*#__PURE__*/map(user => !!user && user.emailVerified);\nconst customClaims = /*#__PURE__*/pipe(idTokenResult, /*#__PURE__*/map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\n\nconst hasCustomClaim = claim => pipe(customClaims, map(claims => claims.hasOwnProperty(claim)));\n\nconst redirectUnauthorizedTo = redirect => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\n\nconst redirectLoggedInTo = redirect => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\n\nlet AngularFireAuthGuardModule = /*#__PURE__*/(() => {\n  class AngularFireAuthGuardModule {\n    constructor() {\n      firebase.registerVersion('angularfire', VERSION.full, 'auth-guard-compat');\n    }\n\n  }\n\n  AngularFireAuthGuardModule.ɵfac = function AngularFireAuthGuardModule_Factory(t) {\n    return new (t || AngularFireAuthGuardModule)();\n  };\n\n  AngularFireAuthGuardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFireAuthGuardModule\n  });\n  AngularFireAuthGuardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [AngularFireAuthGuard]\n  });\n  return AngularFireAuthGuardModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AngularFireAuthGuard, AngularFireAuthGuardModule, canActivate, customClaims, emailVerified, hasCustomClaim, idTokenResult, isNotAnonymous, loggedIn, redirectLoggedInTo, redirectUnauthorizedTo }; //# sourceMappingURL=angular-fire-compat-auth-guard.js.map","map":null,"metadata":{},"sourceType":"module"}